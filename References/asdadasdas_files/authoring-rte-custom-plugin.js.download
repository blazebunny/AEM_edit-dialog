(function (CUI) {
   var ListCommandExtenstion = new Class({
        extend: CUI.rte.commands.List,
        toString: "ListCommandExtenstion",
        execute: function(execDef) {
		   var list = this.getDefiningListDom(execDef.editContext, execDef.nodeList);
		   if(list){
		       if(execDef.command =="insertorderedlist" && CUI.rte.Common.isTag(list,"ol") && $(list).attr("type")){
			      $(list).removeAttr("type");
			   }else{
			       this.superClass.execute.call(this, execDef);
			   }
		   }else{
		      this.superClass.execute.call(this, execDef);
		   }
        }, 	
       queryState: function (selectionDef, cmd) {
          var com = CUI.rte.Common;
		  var context = selectionDef.editContext;
		  var nodeList = selectionDef.nodeList;
		  var tagName;
		  switch (cmd.toLowerCase()) {
		  case 'insertorderedlist':
			tagName = 'ol';
			break;
		  case 'insertunorderedlist':
			tagName = 'ul';
			break;
		  }
		  var definingList = this.getDefiningListDom(context, nodeList);
		  if(!$(definingList).attr("type")){
		     return ((definingList !== null && definingList !== undefined) && com.isTag(definingList, tagName));
		  }else{
		     return false;
		  }
      }

    });
 CUI.rte.commands.CommandRegistry.register("_list", ListCommandExtenstion);
}(window.CUI));
(function (CUI) {
  CUI.rte.commands.OrderedListExtension = new Class({

    toString: 'OrderedListExtension',

    extend: CUI.rte.commands.Command,

    isCommand: function (cmdStr) {
      var cmdStrLC = cmdStr.toLowerCase();
      return (cmdStrLC === 'insertbigalphaorderedlist') || (cmdStrLC === 'insertsmallalphaorderedlist') || (cmdStrLC === 'insertbigromanorderedlist') || (cmdStrLC === 'insertsmallromanorderedlist') ;
    },

    getProcessingOptions: function () {
      var cmd = CUI.rte.commands.Command;
      return cmd.PO_SELECTION | cmd.PO_BOOKMARK | cmd.PO_NODELIST;
    },

    /**
     * Gets all list items of the current selection. Using this method will not include
     * items of a nested list if a nested list is completely covered in the selection.
     * @private
     */
    getListItems: function (execDef) {
      var context = execDef.editContext;
      return execDef.nodeList.getTags(context, [{
        'extMatcher': function (dom) {
          return {
            'isMatching': CUI.rte.Common.isTag(dom, 'li'),
            'preventRecursionIfMatching': true
          };
        }
      }
      ], true, true);
    },

    /**
     * Gets all list items of the current selection. Using this method will include
     * items of a nested list as well.
     * @private
     */
    getAllListItems: function (execDef) {
      var context = execDef.editContext;
      var allItems = execDef.nodeList.getTags(context, [{
        'matcher': function (dom) {
          return CUI.rte.Common.isTag(dom, 'li');
        }
      }
      ], true, true);
      CUI.rte.ListUtils.postprocessSelectedItems(allItems);
      return allItems;
    },

    /**
     * Gets the defining list element for the specified node list. The defining list element
     * is the list element that belongs to the first node contained in the list.
     * @param {CUI.rte.EditContext} context The edit context
     * @param {CUI.rte.NodeList} nodeList The node list
     * @return {HTMLElement} The defining list DOM; null if the first node of the list
     *         is not part of a list
     */
    getDefiningListDom: function (context, nodeList) {
      var com = CUI.rte.Common;
      var determNode = nodeList.getFirstNode();
      if (determNode === null || determNode === undefined) {
        return null;
      }
      var determDom = determNode.dom;
      while (determDom) {
        if (com.isTag(determDom, com.LIST_TAGS)) {
          return determDom;
        }
        determDom = com.getParentNode(context, determDom);
      }
      return null;
    },

    /**
     * Splits the specified array of list items into separate arrays of items for each
     * top-level list.
     * @private
     */
    splitToTopLevelLists: function (execDef, listItems) {
      var context = execDef.editContext;
      var itemsPerList = [];
      var topLevelLists = [];
      var itemCnt = listItems.length;
      for (var i = 0; i < itemCnt; i++) {
        var itemToCheck = listItems[i];
        var listDom = CUI.rte.ListUtils.getTopListForItem(context, itemToCheck.dom);
        var listIndex = CUI.rte.Common.arrayIndex(topLevelLists, listDom);
        if (listIndex < 0) {
          topLevelLists.push(listDom);
          itemsPerList.push([itemToCheck]);
        } else {
          itemsPerList[listIndex].push(itemToCheck);
        }
      }
      return itemsPerList;
    },

    /**
     * Changes the list type of all selected list items, inserting additional tables
     * as required.
     * @private
     */
    changeItemsListType: function (execDef, listItems, listType) {
      var com = CUI.rte.Common;
      var context = execDef.editContext;
      var itemCnt = listItems.length;
      for (var i = 0; i < itemCnt; i++) {
        var item = listItems[i].dom;
        var list = item.parentNode;
        if (!com.isTag(list, listType)) {
          // Change item ...
          var prevSib = list.previousSibling;
          var nextSib = list.nextSibling;
          var isFirst = (com.getChildIndex(item) === 0);
          var isLast = (com.getChildIndex(item) === (list.childNodes.length - 1));
          if (isFirst && prevSib && com.isTag(prevSib, listType)) {
            // move to preceding list of correct type
            list.removeChild(item);
            prevSib.appendChild(item);
            if (list.childNodes.length === 0) {
              list.parentNode.removeChild(list);
            }
          } else if (isLast && nextSib && com.isTag(nextSib, listType)) {
            // move to succeeding list of correct type
            list.removeChild(item);
            com.insertBefore(nextSib, item, nextSib.firstChild);
            if (list.childNodes.length === 0) {
              list.parentNode.removeChild(list);
            }
          } else {
            // we need a new list
            var newList = context.createElement(listType);
            if (item === list.firstChild) {
              // create new list before existing list
              com.insertBefore(list.parentNode, newList, list);
            } else if (item === list.lastChild) {
              // create new list after existing list
              com.insertBefore(list.parentNode, newList, list.nextSibling);
            } else {
              // split list
              var splitList = list.cloneNode(false);
              com.insertBefore(list.parentNode, splitList, list);
              com.insertBefore(list.parentNode, newList, list);
              while (list.childNodes[0] !== item) {
                var domToMove = list.childNodes[0];
                list.removeChild(domToMove);
                splitList.appendChild(domToMove);
              }
            }
            list.removeChild(item);
            newList.appendChild(item);
            if (list.childNodes.length === 0) {
              list.parentNode.removeChild(list);
            }
          }
        }
      }
    },

    /**
     * Creates a new list from all (allowed) block nodes defined in the selection.
     * @private
     */
    createListFromSelection: function (execDef, attrType) {
      var nodeList = execDef.nodeList;
      var context = execDef.editContext;
      // todo distinguish between entire cell and parts of a cell
      var blockLists = nodeList.getEditBlocksByAuxRoots(context, true);
      var listCnt = blockLists.length;
      for (var l = 0; l < listCnt; l++) {
        CUI.rte.ListUtils.createList(context, blockLists[l], "ol");
      }
	  var list = this.getDefiningListDom(context, nodeList);
	  $(list).attr("type",attrType);
	  
    },

    /**
     * Removes items from a list by appending them to their respective parent item
     * (including a separating "br" line break).
     * @private
     */
    unlistItems: function (execDef, listItems, keepStructure) {
      if (!listItems) {
        listItems = this.getAllListItems(execDef);
      }
      var context = execDef.editContext;
      var itemCnt = listItems.length;
      var itemsDom = [];
      for (var i = 0; i < itemCnt; i++) {
        itemsDom.push(listItems[i].dom);
      }
      CUI.rte.ListUtils.unlistItems(context, itemsDom, keepStructure);
    },


    execute: function (execDef) {
      var com = CUI.rte.Common;
      var context = execDef.editContext;
      var nodeList = execDef.nodeList;
      var command = execDef.command;
      var value = execDef.value;
      var selectedType = null;
      switch (command.toLowerCase()) {
      case 'insertbigalphaorderedlist':
        selectedType = 'A';
        break;
      case 'insertsmallalphaorderedlist':
        selectedType = 'a';
        break;
	  case 'insertbigromanorderedlist':
        selectedType = 'I';
        break;
	  case 'insertsmallromanorderedlist':
        selectedType = 'i';
        break;
      }
      if (selectedType) {
        var listItems;
        var refList = this.getDefiningListDom(context, nodeList);
        if (refList === null || refList === undefined) {
          // creating new list (and joining existing lists)
          this.createListFromSelection(execDef, selectedType);
        } else if (refList != null) {
          // change list type of selected items (or entire list)
		    if(!CUI.rte.Common.isTag(refList,"ol")){
				 listItems = this.getListItems(execDef);
                 this.changeItemsListType(execDef, listItems, "ol");
				 var newList = this.getDefiningListDom(context, nodeList);
				 $(newList).attr("type",selectedType);
			}else{
			  var currentType = $(refList).attr("type");
			  if(currentType && currentType === selectedType){
				  // unlist all items of lead list
				  listItems = this.getAllListItems(execDef);
				  if (listItems.length > 0) {
					var itemsByList = this.splitToTopLevelLists(execDef, listItems);
					var listCnt = itemsByList.length;
					for (var l = 0; l < listCnt; l++) {
					  listItems = itemsByList[l];
					  this.unlistItems(execDef, listItems, value === true);
					}
                }
			  }else{
		           $(refList).attr("type",selectedType);
			  }
			}
        } 
      }
    },

    queryState: function (selectionDef, cmd) {
      var com = CUI.rte.Common;
      var context = selectionDef.editContext;
      var nodeList = selectionDef.nodeList;
      var selectedType;
      switch (cmd.toLowerCase()) {
      case 'insertbigalphaorderedlist':
        selectedType = 'A';
        break;
      case 'insertsmallalphaorderedlist':
        selectedType = 'a';
        break;
	  case 'insertbigromanorderedlist':
        selectedType = 'I';
        break;
	  case 'insertsmallromanorderedlist':
        selectedType = 'i';
        break;
      }
      var definingList = this.getDefiningListDom(context, nodeList);
	  var currentType = $(definingList).attr("type");
      return ((definingList !== null && definingList !== undefined) && selectedType === currentType);
    }

  });

  /**
   * Placeholder for "no list functionality available"
   */
  CUI.rte.commands.List.NO_LIST_AVAILABLE = {};


// register command
  CUI.rte.commands.CommandRegistry.register('_orderedlistextension', CUI.rte.commands.OrderedListExtension);

}(window.CUI));
(function (CUI) {
  //'use strict";
  addPluginToDefaultUISettings();
  
   var PLUGIN_NAME = "orderedlistext";
   var BIG_ALPHA = "bigalpha";
   var SMALL_ALPHA = "smallalpha";
   var BIG_ROMAN = "bigroman";
   var SMALL_ROMAN = "smallroman";
   var BIG_ALPHA_GROUP = PLUGIN_NAME + "#" + BIG_ALPHA;
   var SMALL_ALPHA_GROUP =  PLUGIN_NAME + "#" + SMALL_ALPHA;
   var BIG_ROMAN_GROUP = PLUGIN_NAME + "#" + BIG_ROMAN;
   var SMALL_ROMAN_GROUP =  PLUGIN_NAME + "#" + SMALL_ROMAN;
  
  CUI.rte.plugins.OrderedListExtension = new Class({

    toString: 'OrderedListExtension',

    extend: CUI.rte.plugins.Plugin,

    /**
     * @private
     */
    bigAlpha: null,

    /**
     * @private
     */
    smallAlpha: null,
	
	/**
     * @private
     */
    bigRoman: null,

   /**
     * @private
     */
    smallRoman: null,



    _init: function (editorKernel) {
      this.inherited(arguments);
      editorKernel.addPluginListener('beforekeydown', this.handleOnKey, this, this, false);
    },

    /**
     * This function creates new list entries (<li>) by pressing CRTL+ENTER
     * This workaround should be used if there is a block node within a list entry
     *
     * @param event
     */
    handleOnKey: function (event) {
      var range, rangeNode, parentNode, parentParentNode, newListNode;

      if (event.isEnter() && event.isCtrl()) {
        try {
          if (window.getSelection) {  // all browsers, except IE before version 9
            range = CUI.rte.Selection.getLeadRange(event.editContext);
          }
          else {
            if (document.selection) {   // Internet Explorer 6/7/8
              range = document.selection.createRange();
            }
          }

          rangeNode = range.commonAncestorContainer ? range.commonAncestorContainer :
            range.parentElement ? range.parentElement() : range.item(0);
          parentNode = rangeNode.parentNode ? rangeNode.parentNode : rangeNode.parentElement();

          while (rangeNode !== parentNode && parentNode.tagName !== 'LI') {
            rangeNode = rangeNode.parentNode ? rangeNode.parentNode : rangeNode.parentElement();
            parentNode = rangeNode.parentNode ? rangeNode.parentNode : rangeNode.parentElement();
          }

          if (rangeNode.tagName && rangeNode.tagName !== 'LI' && parentNode.tagName === 'LI') {
            parentParentNode = parentNode.parentNode ? parentNode.parentNode : parentNode.parentElement();

            newListNode = event.editContext.doc.createElement('li');
            newListNode.appendChild(rangeNode);

            if (parentNode.nextSibling) {
              parentParentNode.insertBefore(newListNode, parentNode.nextSibling);
            } else {
              parentParentNode.appendChild(newListNode);
            }

            CUI.rte.Selection.selectNode(event.editContext, newListNode, 1);
          }
        } catch (err) {
          // sometimes a node might be undefined
        }
      }
    },

    getFeatures: function () {
      return [BIG_ALPHA, SMALL_ALPHA,BIG_ROMAN,SMALL_ROMAN];
    },

    initializeUI: function (tbGenerator) {
      var plg = CUI.rte.plugins;
      if (this.isFeatureEnabled(BIG_ALPHA)) {
        this.bigAlpha = tbGenerator.createElement(BIG_ALPHA, this, true,{title: "Big Alpha List"});
        tbGenerator.addElement(PLUGIN_NAME, plg.Plugin.SORT_LISTS, this.bigAlpha,10);
        tbGenerator.registerIcon(BIG_ALPHA_GROUP, "abc");
      }
      if (this.isFeatureEnabled(SMALL_ALPHA)) {
         this.smallAlpha = tbGenerator.createElement(SMALL_ALPHA, this, true,{title: "Small Alpha List"});
         tbGenerator.addElement(PLUGIN_NAME, plg.Plugin.SORT_LISTS, this.smallAlpha, 20);
         tbGenerator.registerIcon(SMALL_ALPHA_GROUP, "custom_smallalpha");
      }
	  if (this.isFeatureEnabled(BIG_ROMAN)) {
        this.bigRoman = tbGenerator.createElement(BIG_ROMAN, this, true,{title: "Big Roman List"});
        tbGenerator.addElement(PLUGIN_NAME, plg.Plugin.SORT_LISTS, this.bigRoman,30);
        tbGenerator.registerIcon(BIG_ROMAN_GROUP, "custom_bigroman");
      }
	  if (this.isFeatureEnabled(SMALL_ROMAN)) {
        this.smallRoman = tbGenerator.createElement(SMALL_ROMAN, this, true,{title: "Small Roman List"});
        tbGenerator.addElement(PLUGIN_NAME, plg.Plugin.SORT_LISTS, this.smallRoman,40);
        tbGenerator.registerIcon(SMALL_ROMAN_GROUP, "custom_smallroman");
      }
    },

    notifyPluginConfig: function (pluginConfig) {
      pluginConfig = pluginConfig || {};
      CUI.rte.Utils.applyDefaults(pluginConfig, {
        'features': '*',
        'indentSize': 40,
        'keepStructureOnUnlist': false
      });
      this.config = pluginConfig;
    },

    execute: function (id) {
		id = 'insert' + id + 'orderedlist';
      var value = this.config.keepStructureOnUnlist;
      this.editorKernel.relayCmd(id, value);
    },

    updateState: function (selDef) {
      var context = selDef.editContext;
      var state, isDisabled;
      if (this.bigAlpha) {
        state = this.editorKernel.queryState('insertbigalphaorderedlist', selDef);
        isDisabled = (state === null || state === undefined) ||
          (state === CUI.rte.commands.List.NO_LIST_AVAILABLE);
        this.bigAlpha.setSelected((state === true) || (state === null || state === undefined));
        this.bigAlpha.setDisabled(isDisabled);
      }
      if (this.smallAlpha) {
        state = this.editorKernel.queryState('insertsmallalphaorderedlist', selDef);
        isDisabled = (state === null || state === undefined) ||
          (state === CUI.rte.commands.List.NO_LIST_AVAILABLE);
        this.smallAlpha.setSelected((state === true) || (state === null || state === undefined));
        this.smallAlpha.setDisabled(isDisabled);
      }  
	  
	   if (this.bigRoman) {
        state = this.editorKernel.queryState('insertbigromanorderedlist', selDef);
        isDisabled = (state === null || state === undefined) ||
          (state === CUI.rte.commands.List.NO_LIST_AVAILABLE);
        this.bigRoman.setSelected((state === true) || (state === null || state === undefined));
        this.bigRoman.setDisabled(isDisabled);
      }
      if (this.smallRoman) {
        state = this.editorKernel.queryState('insertsmallromanorderedlist', selDef);
        isDisabled = (state === null || state === undefined) ||
          (state === CUI.rte.commands.List.NO_LIST_AVAILABLE);
        this.smallRoman.setSelected((state === true) || (state === null || state === undefined));
        this.smallRoman.setDisabled(isDisabled);
      }  
    }

  });
  
  function addPluginToDefaultUISettings(){
	    var toolbar = CUI.rte.ui.cui.DEFAULT_UI_SETTINGS.inline.toolbar;
        toolbar.splice(3, 0, BIG_ALPHA_GROUP);
		toolbar.splice(3, 0, SMALL_ALPHA_GROUP);
		toolbar.splice(3, 0, BIG_ROMAN_GROUP);
		toolbar.splice(3, 0, SMALL_ROMAN_GROUP);
        toolbar = CUI.rte.ui.cui.DEFAULT_UI_SETTINGS.fullscreen.toolbar;
        toolbar.splice(3, 0, BIG_ALPHA_GROUP);
		toolbar.splice(3, 0, SMALL_ALPHA_GROUP);
		toolbar.splice(3, 0, BIG_ROMAN_GROUP);
		toolbar.splice(3, 0, SMALL_ROMAN_GROUP);
  }


// register plugin
  CUI.rte.plugins.PluginRegistry.register(PLUGIN_NAME, CUI.rte.plugins.OrderedListExtension);
}(window.CUI));

