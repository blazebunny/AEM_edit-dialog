/*************************************************************************
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2015 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 **************************************************************************/

CUI.rte.GraniteI18nProvider = new Class({

  extend: CUI.rte.I18nProvider,

  _map: {
    "dialog.apply":
      Granite.I18n.get("Apply"),
    "dialog.cancel":
      Granite.I18n.get("Cancel"),
    "dialogs.find.matchCase":
      Granite.I18n.get("Match Case"),
    "dialog.fullscreen.minimize":
      Granite.I18n.get("Minimize"),
    "dialog.fullscreen.text":
      Granite.I18n.get("Text"),
    // TODO : Remove this key when migrated to Coral3 RTE
    "dialog.anchor.remove":
      Granite.I18n.get("Remove"),
    // TODO : Remove this key when migrated to Coral3 RTE
    "dialog.find.find":
      Granite.I18n.get("Find"),
    "dialog.link.path":
      Granite.I18n.get("Path"),
    "dialog.link.pickerTitle":
      Granite.I18n.get("Choose a target path"),
    "dialog.link.target":
      Granite.I18n.get("Target"),
    "dialog.link.same_tab":
      Granite.I18n.get("Same Tab"),
    "dialog.link.new_tab":
      Granite.I18n.get("New Tab"),
    "dialog.link.parent_frame":
      Granite.I18n.get("Parent Frame"),
    "dialog.link.top_frame":
      Granite.I18n.get("Top Frame"),
    "dialog.link.titleFieldPlaceHolder":
      Granite.I18n.get("Alt Text"),
    "dialog.pastePlainText.pasteAreaPlaceHolder":
      Granite.I18n.get("Please paste your text here...."),
    "dialog.replace.findButton":
      Granite.I18n.get("Find"),
    "dialog.replace.replaceButton":
      Granite.I18n.get("Replace"),
    "dialogs.replace.matchcase":
      Granite.I18n.get("Match Case"),
    "dialog.replace.replaceAllButton":
      Granite.I18n.get("Replace all"),
    "dialog.tableAndCellProps.cellProps":
      Granite.I18n.get("CELL PROPERTIES"),
    "dialog.tableAndCellProps.tableProps":
      Granite.I18n.get("TABLE PROPERTIES"),
    "dialog.tableAndCellProps.width":
      Granite.I18n.get("Width"),
    "dialog.tableAndCellProps.widthToolTip":
      Granite.I18n.get("Width in pixels. For relative values add \"%\" e.g. \"40%\"."),
    "dialog.tableAndCellProps.noneAlignHor":
      Granite.I18n.get("None"),
    "dialog.tableAndCellProps.leftAlign":
      Granite.I18n.get("Left"),
    "dialog.tableAndCellProps.centerAlign":
      Granite.I18n.get("Center"),
    "dialog.tableAndCellProps.rightAlign":
      Granite.I18n.get("Right"),
    "dialog.tableAndCellProps.dataCell":
      Granite.I18n.get("Data"),
    "dialog.tableAndCellProps.headerCell":
      Granite.I18n.get("Header"),
    "dialog.tableAndCellProps.height":
      Granite.I18n.get("Height"),
    "dialog.tableAndCellProps.heightToolTip":
      Granite.I18n.get("Height in pixels. For relative values add \"%\" e.g. \"40%\"."),
    "dialog.tableAndCellProps.noneAlignVer":
      Granite.I18n.get("None"),
    "dialog.tableAndCellProps.topAlign":
      Granite.I18n.get("Top"),
    "dialog.tableAndCellProps.middleAlign":
      Granite.I18n.get("Middle"),
    "dialog.tableAndCellProps.bottomAlign":
      Granite.I18n.get("Bottom"),
    "dialog.tableAndCellProps.baselineAlign":
      Granite.I18n.get("Baseline"),
    "dialog.tableAndCellProps.cellType":
      Granite.I18n.get("Cell Type"),
    "dialog.tableAndCellProps.hiddenHeader":
      Granite.I18n.get("Hidden Header"),
    "dialog.tableAndCellProps.headerAttrib":
      Granite.I18n.get("Header"),
    "dialog.tableAndCellProps.idAttrib":
      Granite.I18n.get("Id"),
    "dialog.tableAndCellProps.scopeAttrib":
      Granite.I18n.get("Scope"),
    "dialog.tableAndCellProps.noneScopeAttrib":
      Granite.I18n.get("Scope"),
    "dialog.tableAndCellProps.rowScope":
      Granite.I18n.get("Row"),
    "dialog.tableAndCellProps.columnScope":
      Granite.I18n.get("Column"),
    "dialog.tableAndCellProps.cellPadding":
      Granite.I18n.get("Cell padding"),
    "dialog.tableAndCellProps.cellSpacing":
      Granite.I18n.get("Cell spacing"),
    "dialog.tableAndCellProps.border":
      Granite.I18n.get("Border"),
    "dialog.tableAndCellProps.caption":
      Granite.I18n.get("Caption"),
    "dialog.tableProps.columns":
      Granite.I18n.get("Columns*"),
    "dialog.tableProps.width":
      Granite.I18n.get("Width"),
    "dialog.tableProps.cellPadding":
      Granite.I18n.get("Cell padding"),
    "dialog.tableProps.rows":
      Granite.I18n.get("Rows*"),
    "dialog.tableProps.height":
      Granite.I18n.get("Height"),
    "dialog.tableProps.cellSpacing":
      Granite.I18n.get("Cell spacing"),
    "dialog.tableProps.border":
      Granite.I18n.get("Border"),
    "dialog.tableProps.noHeader":
      Granite.I18n.get("No Header"),
    "dialog.tableProps.rowHeader":
      Granite.I18n.get("First row"),
    "dialog.tableProps.colHeader":
      Granite.I18n.get("First column"),
    "dialog.tableProps.rowAndColHeader":
      Granite.I18n.get("First row and column"),
    "dialog.tableProps.caption":
      Granite.I18n.get("Caption"),
    "dialog.tracklink.enabledLabel":
      Granite.I18n.get("Enable link tracking"),
    "dialog.tracklink.eventsPlaceHolder":
      Granite.I18n.get("event1, event2, ..."),
    "dialog.tracklink.evarsPlaceHolder":
      Granite.I18n.get("eVar1:pagedata.url, prop1:'const', ..."),

    "kernel.alertTitlePaste":
      Granite.I18n.get("Paste"),
    "kernel.alertSecurityPaste":
      Granite.I18n.get("Your browser's security settings don't permit the editor to execute paste operations.<br>Please use the keyboard shortcut (Ctrl/Cmd+V)."),
    "kernel.alertTitleCopy":
      Granite.I18n.get("Copy"),
    "kernel.alertSecurityCopy":
      Granite.I18n.get("Your browser's security settings don't permit the editor to execute copy operations.<br>Please use the keyboard shortcut (Ctrl/Cmd+C)."),
    "kernel.alertTitleCut":
      Granite.I18n.get("Cut"),
    "kernel.alertSecurityCut":
      Granite.I18n.get("Your browser's security settings don't permit the editor to execute cut operations.<br>Please use the keyboard shortcut (Ctrl/Cmd+X)."),
    "kernel.alertTitleError":
      Granite.I18n.get("Error"),
    "kernel.alertIELimitation":
      Granite.I18n.get("Could not insert text due to internal Internet Explorer limitations. Please try to select a smaller text fragment and try again."),
    "commands.paste.alertTitle":
      Granite.I18n.get("Paste"),
    "commands.paste.alertTableError":
      Granite.I18n.get("You are trying to paste table data into an existing table.<br>As this operation would result in invalid HTML, it has been cancelled.<br>Please try to simplify the table's structure and try again."),
    "commands.paste.alertCellSelectionError":
      Granite.I18n.get("You are trying to paste table data into an non-rectangular cell selection.<br>Please choose a rectangular cell selection and try again."),
    "popover.trigger.plugins.Format":
      Granite.I18n.get("Format"),
    "popover.trigger.plugins.Paraformat":
      Granite.I18n.get("Paragraph formats"),
    "popover.trigger.plugins.Justify":
      Granite.I18n.get("Justify"),
    "popover.trigger.plugins.Lists":
      Granite.I18n.get("Lists"),
    "popover.trigger.plugins.Styles":
      Granite.I18n.get("Styles"),
    "plugins.editTools.cutTitle":
      Granite.I18n.get("Cut (Ctrl+X)"),
    "plugins.editTools.cutText":
      Granite.I18n.get("Cuts the currently selected text and puts it in to the clipboard."),
    "plugins.editTools.copyTitle":
      Granite.I18n.get("Copy (Ctrl+C)"),
    "plugins.editTools.copyText":
      Granite.I18n.get("Copies the currently selected text to the clipboard."),
    "plugins.editTools.pasteDefaultTitle":
      Granite.I18n.get("Paste (Ctrl+V)"),
    "plugins.editTools.pasteDefaultText":
      Granite.I18n.get("Pastes the clipboard content with the default paste method."),
    "plugins.editTools.pastePlainTextTitle":
      Granite.I18n.get("Paste as text"),
    "plugins.editTools.pastePlainTextText":
      Granite.I18n.get("Pastes the clipboard content as plain text."),
    "plugins.editTools.pasteWordHtmlTitle":
      Granite.I18n.get("Paste from Word"),
    "plugins.editTools.pasteWordHtmlText":
      Granite.I18n.get("Pastes the clipboard content from Word, applying some cleanup."),
    "plugins.findReplace.findTitle":
      Granite.I18n.get("Find"),
    "plugins.findReplace.replaceTitle":
      Granite.I18n.get("Replace"),
    "plugins.findReplace.findReplaceTitle":
      Granite.I18n.get("Find/Replace"),
    "plugins.findReplace.replaceAllTitle":
      Granite.I18n.get("Replace all"),
    "plugins.findReplace.alertNoMoreResults":
      Granite.I18n.get("No more occurences of '{0}' found in document.<br>Search will be continued from the top."),
    "plugins.findReplace.alertReplaceResults":
      Granite.I18n.get("Text '{0}' has been replaced {1} time(s)."),
    "plugins.findReplace.alertNotFound":
      Granite.I18n.get("Text '{0}' not found."),
    "plugins.findReplace.alertIEProblems":
      Granite.I18n.get("Could not replace due to limited functionality in Internet Explorer."),
    "plugins.findReplace.tooltipFind":
      Granite.I18n.get("Finds a text fragment in the text being edited."),
    "plugins.findReplace.tooltipReplace":
      Granite.I18n.get("Replaces a text fragment with another fragment."),
    "plugins.format.boldTitle":
      Granite.I18n.get("Bold (Ctrl+B)"),
    "plugins.format.boldText":
      Granite.I18n.get("Make the selected text bold."),
    "plugins.format.italicTitle":
      Granite.I18n.get("Italic (Ctrl+I)"),
    "plugins.format.italicText":
      Granite.I18n.get("Make the selected text italic."),
    "plugins.format.underlineTitle":
      Granite.I18n.get("Underline (Ctrl+U)"),
    "plugins.format.underlineText":
      Granite.I18n.get("Underline the selected text."),
    "plugins.image.alignMenu":
      Granite.I18n.get("Image alignment"),
    "plugins.image.alignLeft":
      Granite.I18n.get("Left"),
    "plugins.image.alignRight":
      Granite.I18n.get("Right"),
    "plugins.image.alignNone":
      Granite.I18n.get("None"),
    "plugins.image.alignInherit":
      Granite.I18n.get("Inherit"),
    "plugins.image.imageTitle":
      Granite.I18n.get("Image"),
    "plugins.image.noAlign":
      Granite.I18n.get("No alignment"),
    "plugins.image.properties":
      Granite.I18n.get("Image Properties"),
    "plugins.justify.leftTitle":
      Granite.I18n.get("Align Text Left"),
    "plugins.justify.leftText":
      Granite.I18n.get("Align text to the left."),
    "plugins.justify.centerTitle":
      Granite.I18n.get("Center Text"),
    "plugins.justify.centerText":
      Granite.I18n.get("Center text in the editor."),
    "plugins.justify.rightTitle":
      Granite.I18n.get("Align Text Right"),
    "plugins.justify.rightText":
      Granite.I18n.get("Align text to the right."),
    "plugins.justify.justifyTitle":
      Granite.I18n.get("Justify Text"),
    "plugins.justify.justifyText":
      Granite.I18n.get("Stretch to equal width."),
    "plugins.link.linkTitle":
      Granite.I18n.get("Hyperlink"),
    "plugins.link.linkText":
      Granite.I18n.get("Create or modify a hyperlink."),
    "plugins.link.unlinkTitle":
      Granite.I18n.get("Unlink"),
    "plugins.link.unlinkText":
      Granite.I18n.get("Remove an existing hyperlink from the selected text."),
    "plugins.link.anchorTitle":
      Granite.I18n.get("Anchor"),
    "plugins.link.anchorText":
      Granite.I18n.get("Add or edit an anchor."),
    "plugins.list.ulTitle":
      Granite.I18n.get("Bullet List"),
    "plugins.list.ulText":
      Granite.I18n.get("Start a bulleted list."),
    "plugins.list.olTitle":
      Granite.I18n.get("Numbered List"),
    "plugins.list.olText":
      Granite.I18n.get("Start a numbered list."),
    "plugins.list.indentTitle":
      Granite.I18n.get("Indent"),
    "plugins.list.indentText":
      Granite.I18n.get("Indents the selected paragraph(s) or list item(s)."),
    "plugins.list.outdentTitle":
      Granite.I18n.get("Outdent"),
    "plugins.list.outdentText":
      Granite.I18n.get("Outdents the current paragraph(s) or list item(s)."),
    "plugins.miscTools.sourceEditTitle":
      Granite.I18n.get("Source Edit"),
    "plugins.miscTools.sourceEditText":
      Granite.I18n.get("Switch to source editing mode."),
    "plugins.miscTools.specialCharsTitle":
      Granite.I18n.get("Special Characters"),
    "plugins.miscTools.specialCharsText":
      Granite.I18n.get("Insert a special character."),
    "plugins.paraFormat.defaultP":
      Granite.I18n.get("Paragraph"),
    "plugins.paraFormat.defaultH1":
      Granite.I18n.get("Heading 1"),
    "plugins.paraFormat.defaultH2":
      Granite.I18n.get("Heading 2"),
    "plugins.paraFormat.defaultH3":
      Granite.I18n.get("Heading 3"),
    "plugins.spellCheck.checkSpellTitle":
      Granite.I18n.get("Check spelling"),
    "plugins.spellCheck.checkSpellText":
      Granite.I18n.get("Checks the spelling of the entire text."),
    "plugins.spellCheck.spellChecking":
      Granite.I18n.get("Spell Checking"),
    "plugins.spellCheck.noMistakeAlert":
      Granite.I18n.get("No spelling mistakes found."),
    "plugins.spellCheck.failAlert":
      Granite.I18n.get("Spell checking failed."),
    "plugins.spellCheck.noSuggestions":
      Granite.I18n.get("No suggestions available"),
    "plugins.subSuperScript.subTitle":
      Granite.I18n.get("Subscript"),
    "plugins.subSuperScript.subText":
      Granite.I18n.get("Formats the selected text as subscript."),
    "plugins.subSuperScript.superTitle":
      Granite.I18n.get("Superscript"),
    "plugins.subSuperScript.superText":
      Granite.I18n.get("Formats the selected text as superscript."),
    "plugins.table.tableTitle":
      Granite.I18n.get("Table"),
    "plugins.table.tableText":
      Granite.I18n.get("Creates a new table or edits the properties of an existing table."),
    "plugins.table.cellTitle":
      Granite.I18n.get("Cell"),
    "plugins.table.cellText":
      Granite.I18n.get("Edit the properties of a selected cell."),
    "plugins.table.insertAboveTitle":
      Granite.I18n.get("Insert Above"),
    "plugins.table.insertAboveText":
      Granite.I18n.get("Insert a new row above the current row."),
    "plugins.table.insertBelowTitle":
      Granite.I18n.get("Insert Below"),
    "plugins.table.insertBelowText":
      Granite.I18n.get("Insert a new row below the current row."),
    "plugins.table.deleteRowTitle":
      Granite.I18n.get("Delete Row"),
    "plugins.table.deleteRowText":
      Granite.I18n.get("Delete the current row."),
    "plugins.table.insertLeftTitle":
      Granite.I18n.get("Insert Left"),
    "plugins.table.insertLeftText":
      Granite.I18n.get("Insert a new column to the left of the current column."),
    "plugins.table.insertRightTitle":
      Granite.I18n.get("Insert Right"),
    "plugins.table.insertRightText":
      Granite.I18n.get("Insert a new column to the right of the current column."),
    "plugins.table.deleteColumnTitle":
      Granite.I18n.get("Delete Column"),
    "plugins.table.deleteColumnText":
      Granite.I18n.get("Delete the current column."),
    "plugins.table.cellProps":
      Granite.I18n.get("Cell properties"),
    "plugins.table.mergeCells":
      Granite.I18n.get("Merge cells"),
    "plugins.table.mergeRight":
      Granite.I18n.get("Merge right"),
    "plugins.table.mergeDown":
      Granite.I18n.get("Merge down"),
    "plugins.table.splitHor":
      Granite.I18n.get("Split cell horizontally"),
    "plugins.table.splitVert":
      Granite.I18n.get("Split cell vertically"),
    "plugins.table.cell":
      Granite.I18n.get("Cell"),
    "plugins.table.column":
      Granite.I18n.get("Column"),
    "plugins.table.row":
      Granite.I18n.get("Row"),
    "plugins.table.insertBefore":
      Granite.I18n.get("Insert before"),
    "plugins.table.insertAfter":
      Granite.I18n.get("Insert after"),
    "plugins.table.remove":
      Granite.I18n.get("Remove"),
    "plugins.table.tableProps":
      Granite.I18n.get("Table properties"),
    "plugins.table.removeTable":
      Granite.I18n.get("Remove table"),
    "plugins.table.nestedTable":
      Granite.I18n.get("Create nested table"),
    "plugins.table.selectRow":
      Granite.I18n.get("Select entire row"),
    "plugins.table.selectColumn":
      Granite.I18n.get("Select entire column"),
    "plugins.table.insertParaBefore":
      Granite.I18n.get("Insert paragraph before table"),
    "plugins.table.insertParaAfter":
      Granite.I18n.get("Insert paragraph after table"),
    "plugins.table.createTable":
      Granite.I18n.get("Create table"),
    "plugins.table.ensureparagraph":
      Granite.I18n.get("Ensure Paragraph"),
    "plugins.table.modifytableandcell":
      Granite.I18n.get("Edit Table and Cell Properties"),
    "plugins.table.exitTableEditing":
      Granite.I18n.get("Exit Table Editing"),
    "plugins.undoRedo.undoTitle":
      Granite.I18n.get("Undo"),
    "plugins.undoRedo.undoText":
      Granite.I18n.get("Undo the last change."),
    "plugins.undoRedo.redoTitle":
      Granite.I18n.get("Redo"),
    "plugins.undoRedo.redoText":
      Granite.I18n.get("Redo previously undone changes."),
    "plugins.fullscreen.toggleTitle":
      Granite.I18n.get("Fullscreen"),
    "plugins.fullscreen.toggleText":
      Granite.I18n.get("Toggle fullscreen mode."),
    "plugins.fullscreen.startTitle":
      Granite.I18n.get("Fullscreen"),
    "plugins.fullscreen.startText":
      Granite.I18n.get("Start fullscreen mode."),
    "plugins.fullscreen.finishTitle":
      Granite.I18n.get("Fullscreen"),
    "plugins.fullscreen.finishText":
      Granite.I18n.get("Exit fullscreen mode."),
    "plugins.control.closeTitle":
      Granite.I18n.get("Close"),
    "plugins.control.closeText":
      Granite.I18n.get("Finish editing the text."),
    "plugins.control.saveTitle":
      Granite.I18n.get("Save")
  },

  getText: function(id, values) {
    var text = id;
    if (this._map && this._map.hasOwnProperty(id)) {
      text = this._map[id];
    }
    if (values) {
      if (!CUI.rte.Utils.isArray(values)) {
        text = text.replace("{0}", values);
      } else {
        for (var s = 0; s < values.length; s++) {
          text = text.replace("{" + s + "}", values[s])
        }
      }
    }
    return text;
  },

  getLocale: function() {
    return Granite.I18n.getLocale();
  }

});

CUI.rte.Utils.setI18nProvider(new CUI.rte.GraniteI18nProvider());

/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2018 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 */

// Override DEFAULT_UI_SETTINGS (CQ-66688)
CUI.rte.ui.cui.DEFAULT_UI_SETTINGS = {
    "inline": {
        // TODO adjust to final decision of default inline toolbar settings
        "toolbar": [
            "#format",
            "#justify",
            "#lists",
            "links#modifylink",
            "links#unlink",
            "tracklinks#modifylinktracking",
            "fullscreen#start",
            "control#close",
            "control#save"
        ],
        "popovers": {
            "format": {
                "ref": "format",
                "items": [
                    "format#bold",
                    "format#italic",
                    "format#underline"
                ]
            },
            "justify": {
                "ref": "justify",
                "items": [
                    "justify#justifyleft",
                    "justify#justifycenter",
                    "justify#justifyright",
                    "justify#justifyjustify"
                ]
            },
            "lists": {
                "ref": "lists",
                "items": [
                    "lists#unordered",
                    "lists#ordered",
                    "lists#outdent",
                    "lists#indent"
                ]
            },
            "styles": {
                "ref": "styles",
                "items": "styles:getStyles:styles-pulldown"
            },
            "paraformat": {
                "ref": "paraformat",
                "items": "paraformat:getFormats:paraformat-pulldown"
            }
        }
    },
    "fullscreen": {
        "toolbar": [
            "format#bold",
            "format#italic",
            "format#underline",
            "subsuperscript#subscript",
            "subsuperscript#superscript",
            "edit#cut",
            "edit#copy",
            "edit#paste-default",
            "edit#paste-plaintext",
            "edit#paste-wordhtml",
            "links#modifylink",
            "links#unlink",
            "links#anchor",
            "tracklinks#modifylinktracking",
            "findreplace#find",
            "findreplace#replace",
            "undo#undo",
            "undo#redo",
            "justify#justifyleft",
            "justify#justifycenter",
            "justify#justifyright",
            "justify#justifyjustify",
            "lists#unordered",
            "lists#ordered",
            "lists#outdent",
            "lists#indent",
            "table#createoredit",
            "image#imageProps",
            "spellcheck#checktext",
            "generichtml#generichtml",
            "misctools#specialchars",
            "misctools#sourceedit",
            // TODO Source code (?)
            "#styles",
            "#paraformat"
        ],
        "popovers": {
            "styles": {
                "ref": "styles",
                "items": "styles:getStyles:styles-pulldown"
            },
            "paraformat": {
                "ref": "paraformat",
                "items": "paraformat:getFormats:paraformat-pulldown"
            }
        }
    },
    "dialogFullScreen": {
        "toolbar": [
            "format#bold",
            "format#italic",
            "format#underline",
            "justify#justifyleft",
            "justify#justifycenter",
            "justify#justifyright",
            "justify#justifyjustify",
            "lists#unordered",
            "lists#ordered",
            "lists#outdent",
            "lists#indent",
            "links#modifylink",
            "links#unlink",
            "table#createoredit",
            "#paraformat",
            "image#imageProps"
        ],
        "popovers": {
            "paraformat": {
                "ref": "paraformat",
                "items": "paraformat:getFormats:paraformat-pulldown"
            }
        }
    },
    "tableEditOptions": {
        "toolbar": [
            "table#insertcolumn-before",
            "table#insertcolumn-after",
            "table#removecolumn",
            "table#insertrow-before",
            "table#insertrow-after",
            "table#removerow",
            "table#mergecells-right",
            "table#mergecells-down",
            "table#mergecells",
            "table#splitcell-horizontal",
            "table#splitcell-vertical",
            "table#selectrow",
            "table#selectcolumn",
            "table#ensureparagraph",
            "table#modifytableandcell",
            "table#removetable",
            "undo#undo",
            "undo#redo",
            "table#exitTableEditing"
        ]
    }
};

CUI.rte.Theme.BLANK_IMAGE = Granite.HTTP.externalize("/libs/clientlibs/granite/richtext/resources/images/blank.png");

CUI.rte.Theme.PLACEHOLDER_STYLE =
    "background: url(" + Granite.HTTP.externalize("/libs/cq/gui/components/authoring/editors/clientlibs/core/css/resources/genhtml-placeholder.svg") + ") no-repeat bottom center; "
    + "width: 16px; min-width: 16px; max-width: 16px; "
    + "height: 16px; min-height: 16px; max-height: 16px; "
    + "padding-left: 2px; padding-right: 2px;";

/*************************************************************************
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2016 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 **************************************************************************/

;(function($) {

    /**
     * CUI.rte.ui.cui.CQLinkBaseDialog
     *
     * @ignore
     * @class
     * @extends CUI.rte.ui.cui.AbstractDialog
     * @private
     */
    CUI.rte.ui.cui.CQLinkBaseDialog = new Class({

        extend: CUI.rte.ui.cui.LinkBaseDialog,

        toString: "CQLinkBaseDialog",

        hbTemplate: (function anonymous(data_0) {
            var frag = document.createDocumentFragment();
            var data = data_0;
            var el0 = document.createElement("div");
            el0.className += " rte-dialog-columnContainer";
            var el1 = document.createTextNode("\n    ");
            el0.appendChild(el1);
            var el2 = document.createElement("div");
            el2.className += " rte-dialog-column";
            var el3 = document.createTextNode("\n      ");
            el2.appendChild(el3);
            var el4 = document.createElement("foundation-autocomplete");
            el4.setAttribute("pickersrc", data_0["pickerSrc"]);
            el4.setAttribute("placeholder", CUI["rte"]["Utils"]["i18n"]('dialog.link.path'));
            el4.setAttribute("name", "href");
            var el5 = document.createTextNode("\n        ");
            el4.appendChild(el5);
            var el6 = document.createElement("coral-overlay");
            el6.className += " foundation-autocomplete-value foundation-picker-buttonlist";
            el6.setAttribute("data-foundation-picker-buttonlist-src", data_0["suggestionSrc"]);
            el4.appendChild(el6);
            var el7 = document.createTextNode("\n        ");
            el4.appendChild(el7);
            var el8 = document.createElement("coral-taglist");
            el8.setAttribute("foundation-autocomplete-value", "");
            el8.setAttribute("name", "href");
            el4.appendChild(el8);
            var el9 = document.createTextNode("\n      ");
            el4.appendChild(el9);
            el2.appendChild(el4);
            var el10 = document.createTextNode("\n    ");
            el2.appendChild(el10);
            el0.appendChild(el2);
            var el11 = document.createTextNode("\n");
            el0.appendChild(el11);
            frag.appendChild(el0);
            var el12 = document.createTextNode("\n");
            frag.appendChild(el12);
            var el13 = document.createElement("div");
            el13.className += " rte-dialog-columnContainer";
            var el14 = document.createTextNode("\n    ");
            el13.appendChild(el14);
            var el15 = document.createElement("div");
            el15.className += " rte-dialog-column";
            var el16 = document.createElement("label");
            var el17 = document.createTextNode(" ");
            el16.appendChild(el17);
            var el18 = document.createElement("input","coral-textfield");
            el18.setAttribute("is", "coral-textfield");
            el18.setAttribute("data-type", "title");
            el18.setAttribute("placeholder", CUI["rte"]["Utils"]["i18n"]('dialog.link.titleFieldPlaceHolder'));
            el16.appendChild(el18);
            var el19 = document.createTextNode(" ");
            el16.appendChild(el19);
            el15.appendChild(el16);
            var el20 = document.createTextNode(" ");
            el15.appendChild(el20);
            el13.appendChild(el15);
            var el21 = document.createTextNode("\n");
            el13.appendChild(el21);
            frag.appendChild(el13);
            var el22 = document.createTextNode("\n");
            frag.appendChild(el22);
            var el23 = document.createElement("div");
            el23.className += " rte-dialog-columnContainer";
            var el24 = document.createTextNode("\n    ");
            el23.appendChild(el24);
            var el25 = document.createElement("div");
            el25.className += " rte-dialog-column";
            var el26 = document.createTextNode("\n        ");
            el25.appendChild(el26);
            var el27 = this["targetSelect"] = document.createElement("coral-select");
            el27.setAttribute("handle", "targetSelect");
            var el28 = document.createTextNode("\n            ");
            el27.appendChild(el28);
            var el29 = document.createElement("coral-select-item");
            el29.setAttribute("value", "");
            el29.textContent = CUI["rte"]["Utils"]["i18n"]('dialog.link.target');
            el27.appendChild(el29);
            var el30 = document.createTextNode("\n            ");
            el27.appendChild(el30);
            var el31 = document.createElement("coral-select-item");
            el31.setAttribute("value", "_self");
            el31.textContent = CUI["rte"]["Utils"]["i18n"]('dialog.link.same_tab');
            el27.appendChild(el31);
            var el32 = document.createTextNode("\n            ");
            el27.appendChild(el32);
            var el33 = document.createElement("coral-select-item");
            el33.setAttribute("value", "_blank");
            el33.textContent = CUI["rte"]["Utils"]["i18n"]('dialog.link.new_tab');
            el27.appendChild(el33);
            var el34 = document.createTextNode("\n            ");
            el27.appendChild(el34);
            var el35 = document.createElement("coral-select-item");
            el35.setAttribute("value", "_parent");
            el35.textContent = CUI["rte"]["Utils"]["i18n"]('dialog.link.parent_frame');
            el27.appendChild(el35);
            var el36 = document.createTextNode("\n            ");
            el27.appendChild(el36);
            var el37 = document.createElement("coral-select-item");
            el37.setAttribute("value", "_top");
            el37.textContent = CUI["rte"]["Utils"]["i18n"]('dialog.link.top_frame');
            el27.appendChild(el37);
            var el38 = document.createTextNode("\n        ");
            el27.appendChild(el38);
            el25.appendChild(el27);
            var el39 = document.createTextNode("\n    ");
            el25.appendChild(el39);
            el23.appendChild(el25);
            var el40 = document.createTextNode("\n");
            el23.appendChild(el40);
            frag.appendChild(el23);
            var el41 = document.createTextNode("\n");
            frag.appendChild(el41);
            var el42 = document.createElement("div");
            el42.className += " rte-dialog-columnContainer";
            var el43 = document.createTextNode("\n    ");
            el42.appendChild(el43);
            var el44 = document.createElement("div");
            el44.className += " rte-dialog-column rte-dialog-column--rightAligned";
            var el45 = document.createTextNode("\n        ");
            el44.appendChild(el45);
            var el46 = document.createElement("button","coral-button");
            el46.setAttribute("is", "coral-button");
            el46.setAttribute("icon", "close");
            el46.setAttribute("title", CUI["rte"]["Utils"]["i18n"]('dialog.cancel'));
            el46.setAttribute("aria-label", CUI["rte"]["Utils"]["i18n"]('dialog.cancel'));
            el46.setAttribute("iconsize", "S");
            el46.setAttribute("type", "button");
            el46.setAttribute("data-type", "cancel");
            el46.setAttribute("tabindex", "-1");
            el44.appendChild(el46);
            var el47 = document.createTextNode("\n        ");
            el44.appendChild(el47);
            var el48 = document.createElement("button","coral-button");
            el48.setAttribute("is", "coral-button");
            el48.setAttribute("icon", "check");
            el48.setAttribute("title", CUI["rte"]["Utils"]["i18n"]('dialog.apply'));
            el48.setAttribute("aria-label", CUI["rte"]["Utils"]["i18n"]('dialog.apply'));
            el48.setAttribute("iconsize", "S");
            el48.setAttribute("variant", "primary");
            el48.setAttribute("type", "button");
            el48.setAttribute("data-type", "apply");
            el48.setAttribute("tabindex", "-1");
            el44.appendChild(el48);
            var el49 = document.createTextNode("\n    ");
            el44.appendChild(el49);
            el42.appendChild(el44);
            var el50 = document.createTextNode("\n");
            el42.appendChild(el50);
            frag.appendChild(el42);
            var el51 = document.createTextNode("\n");
            frag.appendChild(el51);
            return frag;
        }),

        initialize: function (config) {
            this.inherited(arguments);
            this.hrefField = this.$dialog.find('foundation-autocomplete')[0];
        },

        construct: function() {
            window["Coral"]["templates"]["RichTextEditor"]["dlg_" + this.getDataType()] = this.hbTemplate;
        },

        dlgToModel: function() {
            this.inherited(arguments);
            if (this.objToEdit) {
                // Convert to a proper URL using URITemplate. Granite.URITemplate acts like a silver bullet.
                // It converts a path to a url, however if path is already a url, it will not double encode it.
                // Refer CQ-4206768
                var href = this.objToEdit.href;
                href = Granite.URITemplate.expand("{+path}", {"path" : href});
                // CQ Antisamy rules remove href with single quote characters
                // Hence, we need to url-encode them as a special case. See CQ-4223011
                href = href.replace(/'/g, '%27');
                this.objToEdit.href = href;
            }
        },

        getDataType: function() {
            return "link";
        }

    });

})(window.jQuery);
/*************************************************************************
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2012 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 **************************************************************************/

/**
 * CUI.rte.plugins.CQLinkPlugin
 *
 * @ignore
 * @class
 * @extends CUI.rte.plugins.LinkPlugin
 * <p>This class extends the CUI LinkPlugin & adds to the default configuration a linkOptionsLoader, which
 * can be used to complete internal links in the PathBrowser.</p>
 */

;(function($) {

    CUI.rte.plugins.CQLinkPlugin = new Class({

        extend: CUI.rte.plugins.LinkPlugin,

        notifyPluginConfig: function(config) {
            // call the original plugin's notifyPluginConfig method
            this.inherited(arguments);

            var anchorImageUrl = Granite.HTTP.externalize("/libs/clientlibs/granite/richtext/resources/images/anchor.png");
            if (!this.config.anchorEditingStyle) {
                // Anchor image is by default resizable in Firefox because it is inside contenteditable div.
                // Setting contenteditable false on the image stops re-sizing but introduces some other issues like copying of image on drag.
                // So, Set min and max width and height to avoid resizing of the anchor image (see CQ-34619)
                this.config.anchorEditingStyle = "width: 11px; min-width: 11px; max-width: 11px; line-height: 12px; overflow: hidden; " +
                    "background: url(" + anchorImageUrl + ") no-repeat bottom left; " +
                    "height: 12px; min-height: 12px; max-height: 12px; padding-right: 3px; display: inline-block;";
            }
            if (!this.config.linkDialogConfig.dialogProperties) {
                this.config.linkDialogConfig.dialogProperties = {};
            }
            if (!this.config.linkDialogConfig.dialogProperties.crumbRoot) {
                this.config.linkDialogConfig.dialogProperties.crumbRoot = CUI.rte.Utils.i18n("Content");
            }
            if (!this.config.linkDialogConfig.dialogProperties.rootPath) {
                this.config.linkDialogConfig.dialogProperties.rootPath = "/content";
            }
            var rootPath = encodeURI(this.config.linkDialogConfig.dialogProperties.rootPath);
            this.config.linkDialogConfig.dialogProperties.pickerSrc = "/mnt/overlay/cq/gui/content/linkpathfield/picker.html?root=" + rootPath;
            this.config.linkDialogConfig.dialogProperties.suggestionSrc = "/mnt/overlay/cq/gui/content/linkpathfield/suggestion{.offset,limit}.html?root=" + rootPath + "&filter=hierarchyNotFile{&query}";
            // if no linkOptionsLoader is present, add a default implementation
            this.config.linkDialogConfig.dialogProperties.linkOptionsLoader = this.config.linkDialogConfig.dialogProperties.linkOptionsLoader
                || function(path, callback) {
                    jQuery.get(path + ".pages.json", {
                            predicate: "hierarchyNotFile"
                        },
                        function(data) {
                            var pages = data.pages;
                            var result = [];
                            for(var i = 0; i < pages.length; i++) {
                                result.push(pages[i].label);
                            }
                            if (callback) callback(result);
                        }, "json");
                    return false;
                };
        },

        getDialogClass: function() {
            return CUI.rte.ui.cui.CQLinkBaseDialog;
        }

    });

})(window.jQuery);

// register plugin
CUI.rte.plugins.PluginRegistry.register("links", CUI.rte.plugins.CQLinkPlugin);

/*************************************************************************
*
* ADOBE CONFIDENTIAL
* ___________________
*
*  Copyright 2015 Adobe Systems Incorporated
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Adobe Systems Incorporated and its suppliers,
* if any.  The intellectual and technical concepts contained
* herein are proprietary to Adobe Systems Incorporated and its
* suppliers and are protected by trade secret or copyright law.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe Systems Incorporated.
**************************************************************************/

;(function($) {

/**
 * CUI.rte.commands.CQTrackLink
 *
 * @ignore
 * @class
 * @extends CUI.rte.commands.Command
 * @private
 */
CUI.rte.commands.CQTrackLink = new Class({

    toString: "TrackLink",

    extend: CUI.rte.commands.Command,

    /**
     * Creates a styled link from the current selection.
     *
     * @memberOf CUI.rte.commands.CQTrackLink.prototype
     * @private
     */
    addLinkTrackingToDom: function(execDef) {
        var context = execDef.editContext;
        var nodeList = execDef.nodeList;
        var attributes = execDef.value.attributes || { };
        var links = [ ];
        nodeList.getAnchors(context, links, true);
        if (links.length > 0) {
            // modify existing link(s)
            for (var i = 0; i < links.length; i++) {
                this.applyLinkProperties(links[i].dom, attributes);
            }
        } else {
            // not a link, do nothing
        }
    },

    /**
     * Applies link tracking to the given anchor DOM element.
     *
     * @memberOf CUI.rte.commands.CQTrackLink.prototype
     * @private
     *
     * @param {HTMLElement} dom DOM element the link tracking will be applied to (should be an anchor)
     * @param {Object} addAttributes additional attributes
     */
    applyLinkProperties: function(dom, addAttributes) {
        var com = CUI.rte.Common;
        
        for (var attribName in addAttributes) {
            if (addAttributes.hasOwnProperty(attribName)) {
                var attribValue = addAttributes[attribName];
                if (attribValue && (attribValue.length > 0)
                        && (attribValue != CUI.rte.commands.CQTrackLink.REMOVE_ATTRIBUTE)) {
                    com.setAttribute(dom, attribName, attribValue);
                } else {
                    com.removeAttribute(dom, attribName);
                }
            }
        }
    },

    isCommand: function(cmdStr) {
        var cmdLC = cmdStr.toLowerCase();
        return (cmdLC == "modifylinktracking");
    },

    getProcessingOptions: function() {
        var cmd = CUI.rte.commands.Command;
        return cmd.PO_SELECTION | cmd.PO_NODELIST;
    },

    execute: function(execDef) {
        switch (execDef.command.toLowerCase()) {
            case "modifylinktracking":
                this.addLinkTrackingToDom(execDef);
                break;
        }
    },

    queryState: function(selectionDef, cmd) {
        return (selectionDef.anchorCount > 0);
    }

});

/**
 * Placeholder object for explicitly removing an attribute
 */
CUI.rte.commands.CQTrackLink.REMOVE_ATTRIBUTE = new Object();


// register command
CUI.rte.commands.CommandRegistry.register("tracklinks", CUI.rte.commands.CQTrackLink);

})(window.jQuery);
/*************************************************************************
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2015 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 **************************************************************************/

;(function($) {

/**
 * CUI.rte.ui.cui.CQTrackLinkDialog
 *
 * @ignore
 * @class
 * @extends CUI.rte.ui.cui.AbstractDialog
 * @private
 */
CUI.rte.ui.cui.CQTrackLinkDialog = new Class({

    extend: CUI.rte.ui.cui.AbstractDialog,

    toString: "TrackLinkDialog",

    template: (function anonymous(data_0){
        var frag = document.createDocumentFragment();
        var data = data_0;
        var el0 = document.createElement("div");
        el0.className = "rte-dialog-columnContainer";
        var el2 = document.createElement("div");
        el2.className = "rte-dialog-column";
        var el4 = document.createElement("coral-checkbox");
        el4.setAttribute("name", "enabled");
        el4.setAttribute("value", "true");
        // HINT: changed from 'el4.textContent' to 'el4.label.textContent'
        //       otherwise coral-checkbox would not show up
        el4.label.textContent = CUI.rte.Utils.i18n("dialog.tracklink.enabledLabel");
        el2.appendChild(el4);
        el0.appendChild(el2);
        frag.appendChild(el0);
        var el8 = document.createElement("div");
        el8.className = "rte-dialog-columnContainer";
        var el10 = document.createElement("div");
        el10.className = "rte-dialog-column";
        var el11 = document.createTextNode(" ");
        el10.appendChild(el11);
        var el12 = document.createElement("input","coral-textfield");
        el12.setAttribute("is", "coral-textfield");
        el12.setAttribute("name", "events");
        el12.setAttribute("placeholder", CUI.rte.Utils.i18n("dialog.tracklink.eventsPlaceHolder"));
        el10.appendChild(el12);
        var el13 = document.createTextNode(" ");
        el10.appendChild(el13);
        el8.appendChild(el10);
        frag.appendChild(el8);
        var el16 = document.createElement("div");
        el16.className = "rte-dialog-columnContainer";
        var el18 = document.createElement("div");
        el18.className = "rte-dialog-column";
        var el19 = document.createTextNode(" ");
        el18.appendChild(el19);
        var el20 = document.createElement("input","coral-textfield");
        el20.setAttribute("is", "coral-textfield");
        el20.setAttribute("name", "evars");
        el20.setAttribute("placeholder", CUI.rte.Utils.i18n("dialog.tracklink.evarsPlaceHolder"));
        el18.appendChild(el20);
        var el21 = document.createTextNode(" ");
        el18.appendChild(el21);
        el16.appendChild(el18);
        frag.appendChild(el16);
        var el24 = document.createElement("div");
        el24.className = "rte-dialog-columnContainer";
        var el26 = document.createElement("div");
        el26.className = "rte-dialog-column rte-dialog-column--rightAligned";
        var el27 = document.createTextNode(" ");
        el26.appendChild(el27);
        var el28 = document.createElement("button","coral-button");
        el28.setAttribute("is", "coral-button");
        el28.setAttribute("data-type", "cancel");
        el28.setAttribute("icon", "close");
        el28.setAttribute("iconsize", "S");
        el26.appendChild(el28);
        var el29 = document.createTextNode(" ");
        el26.appendChild(el29);
        var el30 = document.createElement("button","coral-button");
        el30.setAttribute("is", "coral-button");
        el30.setAttribute("data-type", "apply");
        el30.setAttribute("variant", "primary");
        el30.setAttribute("icon", "check");
        el30.setAttribute("iconsize", "S");
        el26.appendChild(el30);
        var el31 = document.createTextNode(" ");
        el26.appendChild(el31);
        el24.appendChild(el26);
        frag.appendChild(el24);
        return frag;
    }),

    $enabled: null,

    $events: null,

    $evars: null,

    construct: function() {
        if (Coral.templates.RichTextEditor) {
            Coral.templates.RichTextEditor['dlg_' + this.getDataType()] = this.template;
        }
    },

    getDataType: function() {
        return "tracklinks";
    },

    initialize: function(config) {
        this.inherited(arguments);
        var self = this;

        this.$enabled = this.$container.find("[name='enabled']");
        this.$events = this.$container.find("[name='events']");
        this.$evars = this.$container.find("[name='evars']");

        this.$enabled.on("change", function() {
            self.handleInputFields(this.checked)
        });
        this.$dialog.on("keydown", this.handleKeyDown);
    },

    onShow: function() {
        if (!CUI.rte.Common.ua.isTouch) {
            var self = this;
            window.setTimeout(function() {
                self.$enabled.focus();
            }, 1);
        }
    },

    preprocessModel: function() {
        if (this.objToEdit && this.objToEdit.dom) {
            this.objToEdit.href = CUI.rte.HtmlRules.Links.getLinkHref(this.objToEdit.dom);
            var com = CUI.rte.Common;
            var attribNames = com.getAttributeNames(this.objToEdit.dom, false);
            for (var i = 0; i < attribNames.length; i++) {
                var attribName = attribNames[i];
                var value = com.getAttribute(this.objToEdit.dom, attribName);
                if (typeof value !== "undefined") {
                    this.objToEdit.attributes[attribName] = value;
                }
            }
        }
    },

    dlgFromModel: function() {
        if (this.$enabled) {
            if (this.objToEdit && this.objToEdit.attributes) {
                var enabled =  this.objToEdit.attributes["adhocenable"] ? true : false;
                if (typeof this.objToEdit.attributes["adhocenable"] === "undefined") {
                    enabled = true;
                }
                this.$enabled.prop("checked", enabled);
                this.handleInputFields(enabled);
            }
        }
        
        if (this.$events) {
            var events = this.objToEdit && this.objToEdit.attributes && this.objToEdit.attributes["adhocevents"]
                            ? this.objToEdit.attributes["adhocevents"]
                            : null;
            this.$events.val(events);
        }
        
        if (this.$evars) {
            var evars = this.objToEdit && this.objToEdit.attributes && this.objToEdit.attributes["adhocevars"]
                            ? this.objToEdit.attributes["adhocevars"]
                            : null;
            this.$evars.val(evars);
        }
    },

    dlgToModel: function() {
        if (this.objToEdit) {
            if (this.$enabled) {
                var enabled = this.$enabled.prop("checked");
                if (enabled) {
                    this.objToEdit.attributes["onclick"] = "CQ_Analytics.Sitecatalyst.customTrack(this)";
                    // cast to string, ignored otherwise
                    this.objToEdit.attributes["adhocenable"] = "" + enabled;
                    
                    if (this.$events) {
                        var events = this.$events.val();
                        this.objToEdit.attributes["adhocevents"] = events;
                    }
                    
                    if (this.$evars) {
                        var evars = this.$evars.val();
                        this.objToEdit.attributes["adhocevars"] = evars;
                    }
                } else {
                    this.objToEdit.attributes["onclick"] = CUI.rte.commands.CQTrackLink.REMOVE_ATTRIBUTE;
                    this.objToEdit.attributes["adhocenable"] = CUI.rte.commands.CQTrackLink.REMOVE_ATTRIBUTE;
                    this.objToEdit.attributes["adhocevents"] = CUI.rte.commands.CQTrackLink.REMOVE_ATTRIBUTE;
                    this.objToEdit.attributes["adhocevars"] = CUI.rte.commands.CQTrackLink.REMOVE_ATTRIBUTE;
                }
            }
        }
    },

    validate: function() {
        return true;
    },

    /**
     * Handles enablement of input fields.
     *
     * @memberOf CUI.rte.ui.cui.CQTrackLinkDialog
     * @private
     *
     * @param enabled Enabled indicator for input fields
     */
    handleInputFields: function(enabled) {
        if (this.$events) {
            this.$events.prop("disabled", !enabled);
        }
        if (this.$evars) {
            this.$evars.prop("disabled", !enabled);
        }
    },

    /**
     * Handles key down event.
     *
     * @memberOf CUI.rte.ui.cui.CQTrackLinkDialog
     * @private
     */
    handleKeyDown: function(event){
        event.stopPropagation();
    }

});

})(window.jQuery);
/*************************************************************************
*
* ADOBE CONFIDENTIAL
* ___________________
*
*  Copyright 2015 Adobe Systems Incorporated
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Adobe Systems Incorporated and its suppliers,
* if any.  The intellectual and technical concepts contained
* herein are proprietary to Adobe Systems Incorporated and its
* suppliers and are protected by trade secret or copyright law.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe Systems Incorporated.
**************************************************************************/

;(function($) {

/**
 * CUI.rte.plugins.CQTrackLinkPlugin
 *
 * <p>This class implements link tracking as a plugin.</p>
 * <p>The plugin ID is "<b>tracklinks</b>".</p>
 * <p><b>Features</b></p>
 * <ul>
 *   <li><b>modifylinktracking</b> - adds a button to modify link tracking</li>
 * </ul>
 *
 * @ignore
 * @class
 * @extends CUI.rte.plugins.Plugin
 */
CUI.rte.plugins.CQTrackLinkPlugin = new Class({

    toString: "TrackLinkPlugin",

    extend: CUI.rte.plugins.Plugin,

    /**
     * @memberOf CUI.rte.plugins.CQTrackLinkPlugin.prototype
     * @private
     */
    tracklinkDialog: null,

    /**
     * @memberOf CUI.rte.plugins.CQTrackLinkPlugin.prototype
     * @private
     */
    tracklinkUI: null,

    getFeatures: function() {
        return ["modifylinktracking"];
    },

    initializeUI: function(tbGenerator) {
        var plg = CUI.rte.plugins;
        if (this.isFeatureEnabled("modifylinktracking")) {
            this.tracklinkUI = tbGenerator.createElement("modifylinktracking", this, false, this.getTooltip("modifylinktracking"));
            tbGenerator.addElement("tracklinks", plg.Plugin.SORT_LINKS + 1, this.tracklinkUI, 10);
            tbGenerator.registerIcon("tracklinks#modifylinktracking", "adobeAnalytics");
        }
    },

    notifyPluginConfig: function(pluginConfig) {
        pluginConfig = pluginConfig || { };
        CUI.rte.Utils.applyDefaults(pluginConfig, {
            "features": "*",
            "tracklinkDialogConfig": {
                "targetConfig": {
                    "mode": "manual"
                }
            },
            "tooltips": {
                "modifylinktracking": {
                    "title": CUI.rte.Utils.i18n("plugins.tracklinks.modifylinktrackingTitle"),
                    "text": CUI.rte.Utils.i18n("plugins.tracklinks.modifylinktrackingText")
                }
            }
        });
        this.config = pluginConfig;
    },

    execute: function(cmd, value, env) {
        if (cmd == "modifylinktracking") {
            this.modifyLink(env.editContext);
        } else {
            this.editorKernel.relayCmd(cmd);
        }
    },

    updateState: function(selDef) {
        var hasSingleAnchor = selDef.anchorCount == 1;
        var hasNoAnchor = selDef.anchorCount == 0;
        var selectedNode = selDef.selectedDom;
        var isLinkableObject = false;
        if (selectedNode) {
            isLinkableObject = CUI.rte.Common.isTag(selectedNode, CUI.rte.plugins.CQTrackLinkPlugin.TRACKABLE_OBJECTS);
        }
        var isCreateLinkEnabled = hasSingleAnchor || isLinkableObject;
        if (this.tracklinkUI) {
            this.tracklinkUI.setDisabled(!isCreateLinkEnabled);
        }
    },

    isHeadless: function(cmd, value) {
        return false;
    },

    /**
     * Creates link tracking using the internal dialog.
     *
     * @memberOf CUI.rte.plugins.CQTrackLinkPlugin.prototype
     * @private
     */
    modifyLink: function(context) {
        var com = CUI.rte.Common;
        var dm = this.editorKernel.getDialogManager();
        // hide if dialog is already shown & configured acordingly
        if (dm.isShown(this.tracklinkDialog) && dm.toggleVisibility(this.tracklinkDialog)) {
            dm.hide(this.tracklinkDialog);
            return;
        }
        var dh = CUI.rte.ui.DialogHelper;
        if (!this.tracklinkDialog || dm.mustRecreate(this.tracklinkDialog)) {
            var dialogConfig = {
                "configVersion": 1,
                "defaultDialog": {
                    "dialogClass": {
                        "type": dh.TYPE_DIALOG
                    }
                },
                "parameters": {
                    "editorKernel": this.editorKernel,
                    "command": this.pluginId + "#modifylinktracking"
                }
            };
            
            this.tracklinkDialog = this.createLinkTrackDialog(dialogConfig);
        }
        var linkToEdit = null;
        var selectionDef = this.editorKernel.analyzeSelection();
        if (selectionDef.anchorCount == 1) {
            linkToEdit = selectionDef.anchors[0];
        }
        linkToEdit = linkToEdit || { };
        if (typeof linkToEdit.attributes === 'undefined') {
            linkToEdit.attributes = { };
        }
        this.tracklinkDialog.initializeEdit(this.editorKernel, linkToEdit, CUI.rte.Utils.scope(this.applyLink, this));
        this.savedRange = CUI.rte.Selection.saveNativeSelection(context);
        dm.show(this.tracklinkDialog);
    },

    /**
     * @memberOf CUI.rte.plugins.CQTrackLinkPlugin.prototype
     * @private
     */
    applyLink: function(context) {
        var com = CUI.rte.Common;
        var linkObj = this.tracklinkDialog.objToEdit;
        if (linkObj) {
            CUI.rte.Selection.restoreNativeSelection(context, this.savedRange);
            this.editorKernel.relayCmd("modifylinktracking", {
                "attributes": linkObj.attributes
            });
        }
    },

    /**
     * @memberOf CUI.rte.plugins.CQTrackLinkPlugin.prototype
     * @private
     */
    createLinkTrackDialog: function(dialogConfig) {
        var context = this.editorKernel.getEditContext();
        var $container = CUI.rte.UIUtils.getUIContainer($(context.root));
        
        var dialog = new CUI.rte.ui.cui.CQTrackLinkDialog();
        dialog.attach(dialogConfig, $container, this.editorKernel);
        
        return dialog;
    }

});

/**
 * Array with tag names that define objects (anchors) that are trackable when selected
 *
 * @private
 * @static
 * @final
 * @type String[]
 */
CUI.rte.plugins.CQTrackLinkPlugin.TRACKABLE_OBJECTS = [
    "a"
];

//register plugin if adhoc link tracking is enabled
$(document).ready(function(){
    // determine window
    var wnd = window;
    var doc = document.getElementById("ContentFrame");
    if (doc) {
        wnd = doc.contentWindow;
    } else {
        doc = document;
    }
    // wait for iframe 
    doc.onload = function() {
        if (typeof wnd.CQ_Analytics !== 'undefined' 
            && typeof wnd.CQ_Analytics.adhocLinkTracking !== 'undefined' 
            && wnd.CQ_Analytics.adhocLinkTracking == "true") {
            
            CUI.rte.plugins.PluginRegistry.register("tracklinks", CUI.rte.plugins.CQTrackLinkPlugin);
        }
    }
})

})(window.jQuery);
/*************************************************************************
 *
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 *  Copyright 2012 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 **************************************************************************/

/**
 * CUI.rte.plugins.SpellCheckerPlugin
 *
 * @ignore
 * @class
 * @extends CUI.rte.plugins.AbstractSpellCheckerPlugin
 * <p>This class implements the spellchecker functionality as a plugin.</p>
 * <p>The plugin ID is "<b>spellcheck</b>".</p>
 * <p><b>Features</b></p>
 * <ul>
 *   <li><b>checktext</b> - adds a button to spellcheck the entire text</li>
 * </ul>
 * @since 5.3
 */
CUI.rte.plugins.SpellCheckerPlugin = new Class({

    toString: "SpellCheckerPlugin",

    extend: CUI.rte.plugins.AbstractSpellCheckerPlugin,

    /**
     * @cfg {String} method
     * The HTTP method to be used for spellchecking requests. Defaults to "POST"
     */

    /**
     * @cfg {String} spellcheckerUrl
     * URL that is used for requesting the spellchecker. The specified URL is automatically
     * being externalized (the webapp context path is prepended if necessary). Defaults
     * to "/bin/spellcheck"
     */

    /**
     * Spell checks the current text
     *
     * @memberOf CUI.rte.plugins.SpellCheckerPlugin
     *
     * @param html
     * @param contentPath
     * @param successFn
     * @param failureFn
     */
    doCheckText:  function(html, contentPath, successFn, failureFn) {
        var url = this.config.spellcheckerUrl;
        var method = this.config.method;
        var callback = function(jqXHR, textStatus) {
            if (textStatus == "success") {
                var isError = true;
                var spellcheckResults;
                try {
                    if (method == "POST") {
                        if (jqXHR && jqXHR.responseJSON) {
                            spellcheckResults = jqXHR.responseJSON;
                            isError = false;
                        }
                    } else if (method == "GET") {
                        if (jqXHR && jqXHR.responseText) {
                            spellcheckResults = CUI.rte.Utils.jsonDecode(jqXHR.responseText);
                            isError = false;
                        }
                    }
                } catch (e) {
                    // ignore by default
                }
                if (isError) {
                    failureFn();
                } else {
                    successFn(spellcheckResults);
                }
            } else {
                failureFn();
            }
        };
        var params = {
            "_charset_": "utf-8",
            "mode": "text",
            "html": "true",
            "text": html,
            "cp": contentPath,
            "json": "true"
        };
        $.ajax({
            method: method,
            url: url,
            data: params,
            complete: callback
        });
    },

    notifyPluginConfig: function(pluginConfig) {
        pluginConfig = pluginConfig || { };
        CUI.rte.Utils.applyDefaults(pluginConfig, {
            "invalidStyle": "border-bottom: dotted red;",
            "invalidClass": null,
            "method": "POST",
            "spellcheckerUrl": "/libs/cq/ui/rte/spellcheck",
            "tooltips": {
                "checktext": {
                    "title": CUI.rte.Utils.i18n("plugins.spellCheck.checkSpellTitle"),
                    "text": CUI.rte.Utils.i18n("plugins.spellCheck.checkSpellText")
                }
            }
        });
        this.config = pluginConfig;
    }

});


// register plugin
CUI.rte.plugins.PluginRegistry.register("spellcheck",
    CUI.rte.plugins.SpellCheckerPlugin);
